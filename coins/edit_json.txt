<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" href="#">
    <title>..::Amir's edit json::..</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            background-color: #72787e;
            color: #fff;
            padding: 20px;
        }

        h1 {
            text-align: center;
            margin-bottom: 20px;
            color: #ffc107;
        }

        .container {
            width: 80%;
            margin: 0 auto;
            padding: 20px;
            background-color: #495057;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
            border-radius: 8px;
        }

        #jsonTableContainer {
            border: 2px solid #198754;
            padding: 10px;
            background-color: #6c757d;
            min-height: 100px;
            border-radius: 4px;
        }

        .row {
            display: flex;
            align-items: center;
            border-bottom: 1px solid #ddd;
            padding: 10px 0;
            transition: background-color 0.3s ease;
        }

        .row:nth-child(odd) {
            background-color: #6c757d;
        }

        .row:hover {
            background-color: #495057;
        }

        .column {
            flex: 1;
            text-align: center;
            padding: 5px;
            color: #fff;
        }

        .thumbnail {
            max-width: 50px;
            max-height: 50px;
            border-radius: 4px;
            cursor: pointer;
        }

        .delete-btn {
            color: #ff4d4d;
            cursor: pointer;
            font-weight: bold;
        }

        a {
            color: #ffc107;
            text-decoration: none;
        }

        a:hover {
            color: #fff;
            text-decoration: underline;
        }

        .download-btn {
            width: 100%;
            padding: 10px;
            background-color: #198754;
            color: #fff;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .download-btn:hover {
            background-color: #145d37;
        }

        .file-input {
            margin-bottom: 20px;
            display: block;
            padding: 10px;
            font-size: 14px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #fff;
            color: #333;
        }

        .header {
            font-weight: bold;
            background-color: #198754;
            color: #fff;
        }

        .add-row-btn {
            width: 100%;
            padding: 10px;
            background-color: #ffc107;
            color: #333;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 10px;
            transition: background 0.3s ease;
        }

        .add-row-btn:hover {
            background-color: #e0a800;
        }

        .image-input {
            width: 100%;
            padding: 5px;
            font-size: 14px;
            text-align: center;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            justify-content: center;
            align-items: center;
            z-index: 1000;
            overflow-y: auto;
        }

        .modal-content {
            position: relative;
            width: 90%;
            max-width: 800px;
            background-color: #fff;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            color: #333;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal img {
            max-width: 100%;
            max-height: 400px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .modal-close {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 20px;
            color: black;
            cursor: pointer;
        }

        .modal h2,
        .modal p {
            margin: 10px 0;
        }

        /* Form styling */
        .edit-form {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            text-align: left;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        .form-group textarea {
            height: 80px;
            resize: vertical;
        }

        .save-btn {
            grid-column: span 2;
            padding: 10px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 10px;
        }

        .save-btn:hover {
            background-color: #218838;
        }

        /* Drag-and-drop effects */
        .row.draggable {
            cursor: move;
        }

        .row.drag-over {
            background-color: #495057;
        }

        /* imageModal */
        .image-filename {
            margin-top: 10px;
            font-size: 14px;
            color: #333;
            text-align: center;
            font-weight: bold;
        }

        /*sorting*/
        .sortable {
            cursor: pointer;
            position: relative;
        }
        
        .sortable:after {
            content: ' ⇅';
            font-size: 0.8em;
            color: #ccc;
            position: absolute;
            right: 5px;
        }
        
        /* Hide the default file input */
        #uploadFileInput {
            display: none;
        }

        /* Professional button styling */
        .btn-success {
            display: inline-flex;
            align-items: center;
            padding: 10px 20px;
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            text-decoration: none;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3);
            margin: 5px;
        }

        .btn-success:hover {
            background: linear-gradient(135deg, #218838 0%, #1e9e8a 100%);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(40, 167, 69, 0.4);
            text-decoration: none;
            color: white;
        }

        .btn-success i {
            margin-right: 8px;
            font-size: 16px;
        }

        .btn-secondary {
            display: inline-flex;
            align-items: center;
            padding: 10px 20px;
            background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);
            color: white;
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            text-decoration: none;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(108, 117, 125, 0.3);
            margin: 5px;
        }

        .btn-secondary:hover {
            background: linear-gradient(135deg, #5a6268 0%, #545b62 100%);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(108, 117, 125, 0.4);
            color: white;
            text-decoration: none;
        }

        .btn-secondary i {
            margin-right: 8px;
            font-size: 16px;
        }

        /* Style the file input trigger (the label) */
        .file-input-label {
            display: inline-flex;
            align-items: center;
            padding: 10px 20px;
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            color: white;
            font-size: 14px;
            border-radius: 6px;
            cursor: pointer;
            text-decoration: none;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(0, 123, 255, 0.3);
            margin: 5px;
        }

        .file-input-label:hover {
            background: linear-gradient(135deg, #0056b3 0%, #004085 100%);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 123, 255, 0.4);
        }

        .file-input-label i {
            margin-right: 8px;
        }

        /* Style the upload button with an icon */
        #uploadFileBtn {
            display: inline-flex;
            align-items: center;
            padding: 10px 20px;
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            font-size: 14px;
            border-radius: 6px;
            cursor: pointer;
            border: none;
            margin: 5px;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3);
            font-weight: 600;
        }

        #uploadFileBtn i {
            margin-right: 8px;
        }

        #uploadFileBtn:hover {
            background: linear-gradient(135deg, #218838 0%, #1e9e8a 100%);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(40, 167, 69, 0.4);
        }

        /* css for delete buttons*/
        .delete-btn {
            display: inline-flex;
            align-items: center;
            color: yellow;
            cursor: pointer;
            font-weight: bold;
        }

        .delete-btn i {
            margin-right: 8px;
        }

        .delete-btn:hover {
            color: red;
        }

        /* Dropdown styling */
        .country-dropdown {
            width: 100%;
            padding: 5px;
            font-size: 14px;
            text-align: center;
            background-color: #fff;
            color: #333;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        /* Drag and drop area styling */
        .drop-area {
            border: 2px dashed #ccc;
            border-radius: 4px;
            padding: 20px;
            text-align: center;
            background-color: #f8f9fa;
            color: #333;
            margin: 10px 0;
            cursor: pointer;
        }

        .drop-area.highlight {
            border-color: #007bff;
            background-color: #e9f0ff;
        }
        
        /* Currency type dropdown */
        .currency-dropdown {
            width: 100%;
            padding: 5px;
            font-size: 14px;
            text-align: center;
            background-color: #fff;
            color: #333;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        /* Image drop area in table */
        .image-drop-area {
            border: 2px dashed #ccc;
            border-radius: 4px;
            padding: 10px;
            text-align: center;
            background-color: #f8f9fa;
            color: #333;
            margin: 5px 0;
            cursor: pointer;
            min-height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .image-drop-area.highlight {
            border-color: #007bff;
            background-color: #e9f0ff;
        }

        .image-drop-area p {
            margin: 0;
            font-size: 12px;
        }
        
        /* Search box styling */
    .search-container {
        margin-bottom: 20px;
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
    }

    .search-box {
        width: 300px;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ddd;
        border-radius: 4px;
        background-color: #fff;
        color: #333;
    }

    .search-box:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
    }

    .clear-search-btn {
        padding: 10px;
        background-color: #dc3545;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .clear-search-btn:hover {
        background-color: #c82333;
    }
    
    .toast-message {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        background-color: rgba(40, 167, 69, 0.5);
        color: white;
        padding: 15px;
        text-align: center;
        font-size: 16px;
        font-weight: bold;
        z-index: 3000;
        opacity: 0;
        display: none;
        transition: opacity 0.5s ease;
    }

    .filter-buttons {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-bottom: 20px;
    }

    .filter-btn {
        padding: 10px 15px;
        background-color: #6c757d;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .filter-btn:hover {
        background-color: #5a6268;
    }

    .filter-btn.active {
        background-color: #28a745;
    }

    .search-container {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 10px;
        margin-bottom: 20px;
    }

    .search-box {
        width: 100%;
        padding: 10px;
        font-size: 14px;
        border: 1px solid #ddd;
        border-radius: 4px;
        background-color: #fff;
        color: #333;
    }

    .image-drop-areas-container {
        display: flex;
        gap: 10px;
        margin-bottom: 10px;
    }

    .merge-drop-area {
        flex: 1;
        min-height: 80px;
    }

    .merge-options {
        display: flex;
        gap: 15px;
        align-items: center;
        margin-bottom: 10px;
    }

    .merge-options label {
        display: flex;
        align-items: center;
        gap: 5px;
        color: #333;
        font-weight: normal;
    }

    #mergeImagesBtn {
        padding: 5px 10px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    #mergeImagesBtn:disabled {
        background-color: #6c757d;
        cursor: not-allowed;
    }
    
    .merge-preview {
        margin-top: 10px;
        padding: 10px;
        border: 2px dashed #007bff;
        border-radius: 5px;
        background-color: #f8f9fa;
    }

    .merge-preview img {
        max-width: 100%;
        max-height: 150px;
        margin: 5px;
        border: 1px solid #ddd;
    }

    .merge-size-info {
        font-size: 12px;
        color: #666;
        margin-top: 5px;
    }

    .button-container {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin: 15px 0;
        flex-wrap: wrap;
    }
    </style>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
</head>

<body>
    <div id="toastMessage" class="toast-message">✅ Changes saved successfully!</div>

    <div class="container">
        <h1>JSON Viewer & Editor</h1>

        <div class="search-container">
            <input type="text" id="countrySearch" class="search-box" placeholder="Search by country...">
            <input type="text" id="sizeSearch" class="search-box" placeholder="Search by size...">
            <input type="number" id="yearFromSearch" class="search-box" placeholder="Year from..." min="0" max="9999">
            <input type="number" id="yearToSearch" class="search-box" placeholder="Year to..." min="0" max="9999">
            <button id="clearSearch" class="clear-search-btn" title="Clear all filters">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <div class="filter-buttons">
            <button id="applyFilters" class="filter-btn">Apply Filters</button>
            <button id="clearFilters" class="filter-btn">Clear Filters</button>
            <button id="toggleAddMode" class="filter-btn">Add New Mode</button>
        </div>
        
        <!-- Updated Professional Button Container -->
        <div class="button-container">
            <label for="uploadFileInput" class="file-input-label">
                <i class="fas fa-file-upload"></i> Choose File
            </label>
            <input type="file" id="uploadFileInput" accept=".json" />

            <button id="uploadFileBtn">
                <i class="fas fa-upload"></i> Upload File
            </button>

            <button class="btn-success" onclick="window.location.href='/upload-form'">
                <i class="fas fa-plus-circle"></i> Add New Item
            </button>
        </div>

        <div id="jsonTableContainer">Loading data...</div>

        <button class="add-row-btn" id="addRowBtn">Add New Row</button>
        <button class="download-btn" id="downloadBtn">Download Updated JSON</button>
        
        <!-- Keep the second Add New Item button at the bottom -->
        <div class="button-container" style="margin-top: 20px;">
            <button class="btn-success" onclick="window.location.href='/upload-form'">
                <i class="fas fa-plus-circle"></i> Add New Item
            </button>
        </div>
    </div>

    <div id="imageModal" class="modal">
        <div class="modal-content">
            <span id="closeModal" class="modal-close">&times;</span>
            <img id="modalImage" src="" alt="Enlarged Image">
            <div id="imageFileName" class="image-filename"></div>
            <div class="edit-form" id="editForm">
                <div class="form-group">
                    <label for="editCountry">Country:</label>
                    <select id="editCountry" name="country" class="country-dropdown"></select>
                </div>
                <div class="form-group">
                    <label for="editCurrencyType">Currency Type:</label>
                    <select id="editCurrencyType" name="currency_type" class="currency-dropdown">
                        <option value="coin">Coin</option>
                        <option value="paper-bill">Paper Bill</option>
                        <option value="antique">Antique</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="editDonorName">Donor Name:</label>
                    <input type="text" id="editDonorName" name="donor_name">
                </div>
                <div class="form-group">
                    <label for="editNote">Note:</label>
                    <textarea id="editNote" name="note"></textarea>
                </div>
                <div class="form-group">
                    <label for="editSize">Size:</label>
                    <input type="text" id="editSize" name="size">
                </div>
                <div class="form-group">
                    <label for="editYear">Year:</label>
                    <input type="text" id="editYear" name="year">
                </div>
                <div class="form-group" style="grid-column: span 2;">
                    <label for="editImage">Image:</label>
                    <div class="drop-area" id="modalImageDropArea">
                        <p>Drag & drop an image here or click to select</p>
                        <input type="file" id="editImageInput" accept="image/*" style="display: none;">
                    </div>
                </div>
                
                <div class="form-group" style="grid-column: span 2;">
                    <label>Merge Images (Optional):</label>
                    <div class="merge-controls">
                        <div class="image-drop-areas-container">
                            <div class="image-drop-area merge-drop-area" id="mergeDropArea1">
                                <p>Drag & drop first image here</p>
                            </div>
                            <div class="image-drop-area merge-drop-area" id="mergeDropArea2">
                                <p>Drag & drop second image here</p>
                            </div>
                        </div>
                        
                        <div class="merge-options">
                            <div>
                                <strong>Merge Direction:</strong>
                                <label><input type="radio" name="mergeDirection" value="horizontal" checked> Side by Side</label>
                                <label><input type="radio" name="mergeDirection" value="vertical"> Top and Bottom</label>
                            </div>
                            
                            <div style="margin-top: 10px;">
                                <strong>Resize Option:</strong>
                                <label><input type="radio" name="resizeOption" value="equal" checked> Equal Size</label>
                                <label><input type="radio" name="resizeOption" value="original"> Keep Original Sizes</label>
                            </div>
                            
                            <button type="button" id="modalMergeImagesBtn" disabled>Merge Images</button>
                        </div>
                        
                        <div id="mergePreviewContainer" style="display: none;">
                            <div class="merge-preview">
                                <p><strong>Preview:</strong></p>
                                <div id="imagePreviews"></div>
                                <div class="merge-size-info" id="sizeInfo"></div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="editHiddenNote">Hidden Note:</label>
                    <textarea id="editHiddenNote" name="hidden_note" placeholder="(Optional, not shown publicly)"></textarea>
                </div>
                <button type="button" class="save-btn" id="saveChangesBtn">Save Changes</button>
            </div>
            
        </div>
    </div>

    <script>
// Global variables
let jsonData = [];
let sortOrder = 1;
let currentEditingIndex = -1;
let countriesData = [];
let activeFilters = {
    country: '',
    size: '',
    yearFrom: '',
    yearTo: ''
};
let isAddMode = false;

// Load countries data
function loadCountries() {
    fetch('/get-countries')
        .then(response => response.json())
        .then(data => {
            countriesData = data;
            populateCountryDropdowns();
        })
        .catch(error => {
            console.error("Error loading countries:", error);
        });
}

// Populate country dropdowns
function populateCountryDropdowns() {
    const editCountryDropdown = document.getElementById('editCountry');
    
    if (!editCountryDropdown) return;
    
    editCountryDropdown.innerHTML = '';
    
    const defaultOption = document.createElement('option');
    defaultOption.value = '';
    defaultOption.textContent = 'Select a country';
    editCountryDropdown.appendChild(defaultOption);
    
    countriesData.forEach(country => {
        const option = document.createElement('option');
        option.value = country.name;
        option.textContent = country.name;
        editCountryDropdown.appendChild(option);
    });
}

function renderTable(data) {
    const tableContainer = document.getElementById("jsonTableContainer");
    if (!tableContainer) return;
    
    tableContainer.innerHTML = '';

    const headerRow = document.createElement('div');
    headerRow.classList.add('row', 'header');
    const headers = [
        { text: 'Country', key: 'country' },
        { text: 'Currency Type', key: 'currency_type' },
        { text: 'Donor Name', key: 'donor_name' },
        { text: 'Image', key: 'image' },
        { text: 'Note', key: 'note' },
        { text: 'Size', key: 'size' },
        { text: 'Year', key: 'year' },
        { text: 'Actions', key: null }
    ];
    
    headers.forEach(header => {
        const column = document.createElement('div');
        column.classList.add('column');
        column.textContent = header.text;
        if (header.key) {
            column.dataset.key = header.key;
            column.classList.add('sortable');
            column.addEventListener('click', () => {
                sortTable(header.key);
            });
        }
        headerRow.appendChild(column);
    });
    tableContainer.appendChild(headerRow);

    data.forEach((row, index) => {
        const rowDiv = document.createElement('div');
        rowDiv.classList.add('row');
        rowDiv.draggable = true;
        rowDiv.setAttribute('data-index', index);

        rowDiv.addEventListener('dragstart', handleDragStart);
        rowDiv.addEventListener('dragover', handleDragOver);
        rowDiv.addEventListener('drop', handleDrop);

        // Country dropdown
        const countryColumn = document.createElement('div');
        countryColumn.classList.add('column');
        const countrySelect = document.createElement('select');
        countrySelect.classList.add('country-dropdown');

        countrySelect.addEventListener('change', function() {
            const oldCountry = row.country;
            const newCountry = this.value;
            const image = row.image;

            if (!image || image === "placeholder.jpg") {
                row.country = newCountry;
                saveUpdates();
                return;
            }

            fetch('/update-country', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    image: image,
                    old_country: oldCountry,
                    new_country: newCountry
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert("Error: " + data.error);
                    this.value = oldCountry;
                } else {
                    console.log(data.message);
                    row.country = newCountry;
                    renderTable(jsonData);
                }
            })
            .catch(error => {
                console.error("Error updating country:", error);
                this.value = oldCountry;
            });
        });

        const defaultOption = document.createElement('option');
        defaultOption.value = '';
        defaultOption.textContent = 'Select country';
        countrySelect.appendChild(defaultOption);
        
        countriesData.forEach(country => {
            const option = document.createElement('option');
            option.value = country.name;
            option.textContent = country.name;
            if (row.country === country.name) {
                option.selected = true;
            }
            countrySelect.appendChild(option);
        });
        
        if (row.country && !countriesData.some(c => c.name === row.country)) {
            const option = document.createElement('option');
            option.value = row.country;
            option.textContent = row.country;
            option.selected = true;
            countrySelect.appendChild(option);
        }
        
        countryColumn.appendChild(countrySelect);
        rowDiv.appendChild(countryColumn);
        
        // Currency type dropdown
        const currencyColumn = document.createElement('div');
        currencyColumn.classList.add('column');
        const currencySelect = document.createElement('select');
        currencySelect.classList.add('currency-dropdown');
        currencySelect.addEventListener('change', function() {
            row.currency_type = this.value;
            saveUpdates();
        });
        
        const currencyOptions = ['coin', 'paper-bill', 'antique'];
        currencyOptions.forEach(optionValue => {
            const option = document.createElement('option');
            option.value = optionValue;
            option.textContent = optionValue.charAt(0).toUpperCase() + optionValue.slice(1);
            if (row.currency_type === optionValue) {
                option.selected = true;
            }
            currencySelect.appendChild(option);
        });
        
        currencyColumn.appendChild(currencySelect);
        rowDiv.appendChild(currencyColumn);
        
        // Donor name (editable)
        const donorColumn = document.createElement('div');
        donorColumn.classList.add('column', 'editable');
        donorColumn.textContent = row.donor_name || "No Donor Name";
        donorColumn.contentEditable = true;
        donorColumn.addEventListener('blur', function() {
            row.donor_name = this.textContent;
            saveUpdates();
        });
        rowDiv.appendChild(donorColumn);
        
        // Image column with drag and drop
        const imageColumn = document.createElement('div');
        imageColumn.classList.add('column');
        
        const dropArea = document.createElement('div');
        dropArea.classList.add('image-drop-area');
        dropArea.setAttribute('data-index', index);

        if (row.image && row.image !== 'placeholder.jpg') {
            dropArea.innerHTML = `<img src="images/${row.country}/${row.image}" 
                                    class="thumbnail" 
                                    data-index="${index}" 
                                    onerror="this.src='images/placeholder.jpg'">`;
        } else {
            dropArea.innerHTML = '<p>Drag & drop image here</p>';
        }

        setupImageDropArea(dropArea, row, index);
        imageColumn.appendChild(dropArea);
        rowDiv.appendChild(imageColumn);
        
        // Note (editable)
        const noteColumn = document.createElement('div');
        noteColumn.classList.add('column', 'editable');
        noteColumn.textContent = row.note || "No Note";
        noteColumn.contentEditable = true;
        noteColumn.addEventListener('blur', function() {
            row.note = this.textContent;
            saveUpdates();
        });
        rowDiv.appendChild(noteColumn);
        
        // Size (editable)
        const sizeColumn = document.createElement('div');
        sizeColumn.classList.add('column', 'editable');
        sizeColumn.textContent = row.size || "No Size";
        sizeColumn.contentEditable = true;
        sizeColumn.addEventListener('blur', function() {
            row.size = this.textContent;
            saveUpdates();
        });
        rowDiv.appendChild(sizeColumn);
        
        // Year (editable)
        const yearColumn = document.createElement('div');
        yearColumn.classList.add('column', 'editable');
        yearColumn.textContent = row.year || "No Year";
        yearColumn.contentEditable = true;
        yearColumn.addEventListener('blur', function() {
            row.year = this.textContent;
            saveUpdates();
        });
        rowDiv.appendChild(yearColumn);
        
        // Actions (delete button)
        const actionColumn = document.createElement('div');
        actionColumn.classList.add('column');
        const deleteBtn = document.createElement('span');
        deleteBtn.classList.add('delete-btn');
        deleteBtn.innerHTML = '<i class="fas fa-trash"></i>';
        deleteBtn.addEventListener('click', function() {
            if (confirm('Are you sure you want to delete this entry?')) {
                jsonData.splice(index, 1);
                renderTable(jsonData);
                saveUpdates();
            }
        });
        actionColumn.appendChild(deleteBtn);
        rowDiv.appendChild(actionColumn);

        tableContainer.appendChild(rowDiv);
    });
    
    // Apply filters after rendering
    filterTable();
}

// Setup image drop area functionality
function setupImageDropArea(dropArea, row, index) {
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.accept = 'image/*';
    fileInput.style.display = 'none';
    document.body.appendChild(fileInput);
    
    dropArea.addEventListener('click', () => {
        fileInput.click();
    });
    
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, preventDefaults, false);
    });
    
    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }
    
    ['dragenter', 'dragover'].forEach(eventName => {
        dropArea.addEventListener(eventName, highlight, false);
    });
    
    ['dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, unhighlight, false);
    });
    
    function highlight() {
        dropArea.classList.add('highlight');
    }
    
    function unhighlight() {
        dropArea.classList.remove('highlight');
    }
    
    dropArea.addEventListener('drop', handleDropFile, false);
    
    fileInput.addEventListener('change', handleFileSelect, false);
    
    function handleDropFile(e) {
        const dt = e.dataTransfer;
        const files = dt.files;
        handleFiles(files, row, index);
    }
    
    function handleFileSelect(e) {
        const files = e.target.files;
        handleFiles(files, row, index);
    }
    
    function handleFiles(files, row, index) {
        if (files.length === 0) return;
        
        const file = files[0];
        const country = row.country;
        
        if (!country) {
            alert('Please select a country first');
            return;
        }
        
        const formData = new FormData();
        formData.append('file', file);
        formData.append('country', country);

        if (row.image && row.image !== "placeholder.jpg") {
            formData.append('existing_image', row.image);
        }

        fetch('/upload-image', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                alert('Error uploading image: ' + data.error);
            } else {
                jsonData[index].image = data.filename;
                renderTable(jsonData);
                saveUpdates();
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error uploading image');
        });
    }
}

function sortTable(key) {
    jsonData.sort((a, b) => {
        if (a[key] < b[key]) return -1 * sortOrder;
        if (a[key] > b[key]) return 1 * sortOrder;
        return 0;
    });
    sortOrder *= -1;
    renderTable(jsonData);
    
    fetch('/update-json', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(jsonData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.message) {
            console.log('Backend JSON updated successfully:', data.message);
        } else {
            console.error('Error updating JSON:', data.error);
            alert(`Error updating JSON: ${data.error}`);
        }
    })
    .catch(error => {
        console.error('Error with fetch request:', error);
        alert('An error occurred while updating the JSON file.');
    });
}

function handleDragStart(e) {
    e.dataTransfer.setData('text/plain', e.target.getAttribute('data-index'));
}

function handleDragOver(e) {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
}

function handleDrop(e) {
    e.preventDefault();
    const draggedIndex = e.dataTransfer.getData('text/plain');
    const targetIndex = e.target.closest('.row').getAttribute('data-index');

    if (draggedIndex !== targetIndex) {
        const draggedItem = jsonData.splice(draggedIndex, 1)[0];
        jsonData.splice(targetIndex, 0, draggedItem);
        renderTable(jsonData);
        saveUpdates();
    }
}

function showToast(message) {
    const toast = document.getElementById("toastMessage");
    if (!toast) return;
    
    toast.textContent = "✅ " + message;
    toast.style.display = "block";
    toast.style.opacity = "1";

    setTimeout(() => {
        toast.style.opacity = "0";
    }, 3000);

    setTimeout(() => {
        toast.style.display = "none";
    }, 4000);
}

function saveUpdates() {
    fetch('/update-json', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(jsonData),
    })
    .then(response => response.json())
    .then(data => {
        console.log(data.message || "File updated.");
        showToast(data.message || "Changes saved!");
    })
    .catch(error => {
        console.error("Error:", error);
        showToast("❌ Error saving changes!");
    });
}

// Filter functionality
function filterTable() {
    const rows = document.querySelectorAll('#jsonTableContainer .row:not(.header)');
    
    rows.forEach(row => {
        const index = parseInt(row.getAttribute('data-index'));
        const rowData = jsonData[index];
        
        let shouldShow = true;
        
        // Country filter
        if (activeFilters.country && rowData.country) {
            const countryMatch = rowData.country.toLowerCase().includes(activeFilters.country.toLowerCase());
            if (!countryMatch) shouldShow = false;
        }
        
        // Size filter
        if (activeFilters.size && rowData.size) {
            const sizeMatch = rowData.size.toLowerCase().includes(activeFilters.size.toLowerCase());
            if (!sizeMatch) shouldShow = false;
        }
        
        // Year range filter
        if (activeFilters.yearFrom && rowData.year) {
            const year = parseInt(rowData.year);
            if (!isNaN(year) && year < parseInt(activeFilters.yearFrom)) {
                shouldShow = false;
            }
        }
        
        if (activeFilters.yearTo && rowData.year) {
            const year = parseInt(rowData.year);
            if (!isNaN(year) && year > parseInt(activeFilters.yearTo)) {
                shouldShow = false;
            }
        }
        
        // Toggle visibility
        row.style.display = shouldShow ? 'flex' : 'none';
    });
}

function applyFilters() {
    activeFilters.country = document.getElementById('countrySearch').value;
    activeFilters.size = document.getElementById('sizeSearch').value;
    activeFilters.yearFrom = document.getElementById('yearFromSearch').value;
    activeFilters.yearTo = document.getElementById('yearToSearch').value;
    
    filterTable();
}

function clearFilters() {
    document.getElementById('countrySearch').value = '';
    document.getElementById('sizeSearch').value = '';
    document.getElementById('yearFromSearch').value = '';
    document.getElementById('yearToSearch').value = '';
    
    activeFilters = {
        country: '',
        size: '',
        yearFrom: '',
        yearTo: ''
    };
    
    filterTable();
}

function toggleAddMode() {
    isAddMode = !isAddMode;
    const button = document.getElementById('toggleAddMode');
    
    if (isAddMode) {
        button.classList.add('active');
        button.textContent = 'Exit Add Mode';
        // Add visual indication for add mode
        document.body.style.backgroundColor = '#2c5530';
    } else {
        button.classList.remove('active');
        button.textContent = 'Add New Mode';
        document.body.style.backgroundColor = '#72787e';
    }
}

// Initialize when DOM is loaded
document.addEventListener("DOMContentLoaded", function () {
    // Load initial data
    fetch('/get-json')
        .then(response => response.json())
        .then(data => {
            jsonData = data;
            renderTable(jsonData);
        })
        .catch(error => {
            console.error("Error fetching JSON data:", error);
            document.getElementById("jsonTableContainer").innerHTML = "Error loading data";
        });

    // Load countries
    loadCountries();

    // Add event listeners
    document.getElementById("uploadFileBtn").addEventListener("click", function () {
        const fileInput = document.getElementById("uploadFileInput");
        const file = fileInput.files[0];

        if (!file) {
            alert("Please select a file to upload.");
            return;
        }

        const formData = new FormData();
        formData.append("file", file);

        fetch('/upload-json', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.message) {
                alert(data.message);
                fetch('/get-json')
                    .then(response => response.json())
                    .then(newData => {
                        jsonData = newData;
                        renderTable(jsonData);
                    });
            } else {
                alert(data.error || "An error occurred.");
            }
        })
        .catch(error => {
            console.error("Error:", error);
            alert("An error occurred while uploading the file.");
        });
    });

    document.getElementById("addRowBtn").addEventListener("click", function () {
        const newRow = {
            country: "",
            currency_type: "coin",
            donor_name: "New Donor Name",
            image: "placeholder.jpg",
            note: "New Note",
            size: "",
            year: ""
        };
        jsonData.push(newRow);
        renderTable(jsonData);
        saveUpdates();
    });

    document.getElementById("downloadBtn").addEventListener("click", function () {
        const jsonString = JSON.stringify(jsonData, null, 2);
        const blob = new Blob([jsonString], { type: "application/json" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = "coins.json";
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    });

    document.getElementById("closeModal").addEventListener("click", function () {
        document.getElementById("imageModal").style.display = "none";
    });

    // Filter event listeners
    document.getElementById("applyFilters").addEventListener("click", applyFilters);
    document.getElementById("clearFilters").addEventListener("click", clearFilters);
    document.getElementById("toggleAddMode").addEventListener("click", toggleAddMode);
    document.getElementById("clearSearch").addEventListener("click", clearFilters);

    // Add real-time filtering for text inputs
    document.getElementById("countrySearch").addEventListener("input", applyFilters);
    document.getElementById("sizeSearch").addEventListener("input", applyFilters);
    document.getElementById("yearFromSearch").addEventListener("input", applyFilters);
    document.getElementById("yearToSearch").addEventListener("input", applyFilters);

    // File input change listener
    document.getElementById("uploadFileInput").addEventListener("change", function (event) {
        const file = event.target.files[0];

        if (!file) {
            alert("No file selected. Please select a JSON file.");
            return;
        }

        if (file.type !== "application/json") {
            alert("Invalid file type. Please upload a valid JSON file.");
            return;
        }

        const reader = new FileReader();
        reader.onload = function (e) {
            try {
                jsonData = JSON.parse(e.target.result);
                renderTable(jsonData);
            } catch (error) {
                alert("Error parsing JSON file. Please check the file format.");
                console.error("JSON Parsing Error:", error);
            }
        };

        reader.onerror = function () {
            alert("Error reading the file. Please try again.");
        };

        reader.readAsText(file);
    });

    // ========== MODAL FUNCTIONALITY ==========

    // Modal click functionality
    document.addEventListener("click", function (event) {
        if (event.target.classList.contains("thumbnail")) {
            const index = event.target.getAttribute("data-index");
            const row = jsonData[index];
            
            // Update modal image and info
            document.getElementById("modalImage").src = `images/${row.country}/${row.image}`;
            document.getElementById("imageFileName").textContent = row.image;
            
            // Populate form fields
            document.getElementById("editCountry").value = row.country || "";
            document.getElementById("editCurrencyType").value = row.currency_type || "";
            document.getElementById("editDonorName").value = row.donor_name || "";
            document.getElementById("editNote").value = row.note || "";
            document.getElementById("editSize").value = row.size || "";
            document.getElementById("editYear").value = row.year || "";
            document.getElementById("editHiddenNote").value = row.hidden_note || "";
            
            currentEditingIndex = index;
            document.getElementById("imageModal").style.display = "flex";
            
            // Reset merge areas
            document.getElementById('mergeDropArea1').innerHTML = '<p>Drag & drop first image here</p>';
            document.getElementById('mergeDropArea2').innerHTML = '<p>Drag & drop second image here</p>';
            document.getElementById('modalMergeImagesBtn').disabled = true;
        }
    });

    // Auto-save functionality for modal fields
    function setupModalAutoSave() {
        const fields = [
            { id: "editCountry", key: "country", type: "select" },
            { id: "editCurrencyType", key: "currency_type", type: "select" },
            { id: "editDonorName", key: "donor_name", type: "input" },
            { id: "editNote", key: "note", type: "textarea" },
            { id: "editSize", key: "size", type: "input" },
            { id: "editYear", key: "year", type: "input" },
            { id: "editHiddenNote", key: "hidden_note", type: "textarea" }
        ];

        fields.forEach(field => {
            const element = document.getElementById(field.id);
            if (!element) return;

            if (field.type === "select") {
                element.addEventListener("change", function() {
                    if (currentEditingIndex !== -1) {
                        jsonData[currentEditingIndex][field.key] = this.value;
                        saveUpdates();
                    }
                });
            } else {
                element.addEventListener("blur", function() {
                    if (currentEditingIndex !== -1) {
                        jsonData[currentEditingIndex][field.key] = this.value;
                        saveUpdates();
                    }
                });
            }
        });
    }

    // Modal image upload functionality
    function setupModalImageUpload() {
        const dropArea = document.getElementById('modalImageDropArea');
        const fileInput = document.getElementById('editImageInput');
        
        if (!dropArea || !fileInput) return;
        
        // Click to select file
        dropArea.addEventListener('click', () => {
            fileInput.click();
        });
        
        // Drag and drop events
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false);
        });
        
        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }
        
        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, () => dropArea.classList.add('highlight'), false);
        });
        
        ['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, () => dropArea.classList.remove('highlight'), false);
        });
        
        // Handle file drop
        dropArea.addEventListener('drop', handleDropFile, false);
        
        // Handle file selection
        fileInput.addEventListener('change', handleFileSelect, false);
        
        function handleDropFile(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            handleFiles(files);
        }
        
        function handleFileSelect(e) {
            const files = e.target.files;
            handleFiles(files);
        }
        
        function handleFiles(files) {
            if (files.length === 0) return;
            
            const file = files[0];
            const country = document.getElementById('editCountry').value;
            
            if (!country) {
                alert('Please select a country first');
                return;
            }
            
            const formData = new FormData();
            formData.append('file', file);
            formData.append('country', country);
            
            // If editing existing row, replace the image
            if (currentEditingIndex !== -1 && jsonData[currentEditingIndex].image && jsonData[currentEditingIndex].image !== "placeholder.jpg") {
                formData.append('existing_image', jsonData[currentEditingIndex].image);
            }
            
            fetch('/upload-image', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert('Error uploading image: ' + data.error);
                } else {
                    // Update the image in the current editing row
                    if (currentEditingIndex !== -1) {
                        jsonData[currentEditingIndex].image = data.filename;
                        renderTable(jsonData);
                        saveUpdates();
                        // Update modal image display
                        document.getElementById("modalImage").src = `images/${country}/${data.filename}`;
                        document.getElementById("imageFileName").textContent = data.filename;
                    }
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error uploading image');
            });
        }
    }

    // Modal image merging functionality
    function setupModalImageMerging() {
        let mergeImage1 = null;
        let mergeImage2 = null;

        const mergeDropArea1 = document.getElementById('mergeDropArea1');
        const mergeDropArea2 = document.getElementById('mergeDropArea2');
        const mergeImagesBtn = document.getElementById('modalMergeImagesBtn');

        // Setup drop areas for merging
        function setupMergeDropArea(dropArea, imageNumber) {
            const fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.accept = 'image/*';
            fileInput.style.display = 'none';
            document.body.appendChild(fileInput);
            
            dropArea.addEventListener('click', () => fileInput.click());
            
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, preventDefaults, false);
            });
            
            ['dragenter', 'dragover'].forEach(eventName => {
                dropArea.addEventListener(eventName, () => dropArea.classList.add('highlight'), false);
            });
            
            ['dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, () => dropArea.classList.remove('highlight'), false);
            });
            
            dropArea.addEventListener('drop', function(e) {
                handleMergeFileDrop(e, imageNumber);
            }, false);
            
            fileInput.addEventListener('change', function(e) {
                handleMergeFileSelect(e, imageNumber);
            });

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            function handleMergeFileDrop(e, imageNumber) {
                const dt = e.dataTransfer;
                const files = dt.files;
                handleMergeFiles(files, imageNumber);
            }

            function handleMergeFileSelect(e, imageNumber) {
                const files = e.target.files;
                handleMergeFiles(files, imageNumber);
            }

            function handleMergeFiles(files, imageNumber) {
                if (files.length === 0) return;
                
                const file = files[0];
                if (!file.type.startsWith('image/')) {
                    alert('Please select an image file');
                    return;
                }
                
                const reader = new FileReader();
                reader.onload = function(e) {
                    const fileSizeKB = Math.round(file.size / 1024);
                    const htmlContent = '<img src="' + e.target.result + '" style="max-width: 100%; max-height: 70px;">' +
                                       '<div style="font-size: 10px; margin-top: 5px;">' +
                                       file.name + '<br>' + file.type + ' (' + fileSizeKB + 'KB)' +
                                       '</div>';
                    
                    if (imageNumber === 1) {
                        mergeImage1 = file;
                        mergeDropArea1.innerHTML = htmlContent;
                    } else {
                        mergeImage2 = file;
                        mergeDropArea2.innerHTML = htmlContent;
                    }
                    
                    // Enable merge button if both images are uploaded
                    if (mergeImage1 && mergeImage2) {
                        mergeImagesBtn.disabled = false;
                    }
                };
                reader.readAsDataURL(file);
            }
        }

        // Setup both drop areas
        setupMergeDropArea(mergeDropArea1, 1);
        setupMergeDropArea(mergeDropArea2, 2);

        // Merge button click handler
        mergeImagesBtn.addEventListener('click', function() {
            if (!mergeImage1 || !mergeImage2) {
                alert('Please upload both images first');
                return;
            }
            
            const mergeDirection = document.querySelector('input[name="mergeDirection"]:checked').value;
            const resizeOption = document.querySelector('input[name="resizeOption"]:checked').value;
            const country = document.getElementById('editCountry').value;
            
            if (!country) {
                alert('Please select a country first');
                return;
            }

            // Create FormData for merging
            const formData = new FormData();
            formData.append('image1', mergeImage1);
            formData.append('image2', mergeImage2);
            formData.append('direction', mergeDirection);
            formData.append('country', country);
            formData.append('resizeOption', resizeOption);

            // Show loading state
            const originalText = mergeImagesBtn.textContent;
            mergeImagesBtn.textContent = 'Merging...';
            mergeImagesBtn.disabled = true;

            fetch('/merge-images-upload', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert('Error merging images: ' + data.error);
                } else {
                    alert('Images merged successfully!');
                    // Update the current row with merged image
                    if (currentEditingIndex !== -1) {
                        jsonData[currentEditingIndex].image = data.filename;
                        renderTable(jsonData);
                        saveUpdates();
                        // Update modal display
                        document.getElementById("modalImage").src = `images/${country}/${data.filename}`;
                        document.getElementById("imageFileName").textContent = data.filename;
                    }
                    // Clear merge areas
                    mergeImage1 = null;
                    mergeImage2 = null;
                    mergeDropArea1.innerHTML = '<p>Drag & drop first image here</p>';
                    mergeDropArea2.innerHTML = '<p>Drag & drop second image here</p>';
                    mergeImagesBtn.disabled = true;
                }
            })
            .catch(error => {
                console.error('Error merging images:', error);
                alert('Error merging images: ' + error.message);
            })
            .finally(() => {
                mergeImagesBtn.textContent = originalText;
                mergeImagesBtn.disabled = false;
            });
        });
    }

    // Initialize modal functionality
    setupModalAutoSave();
    setupModalImageUpload();
    setupModalImageMerging();

});
</script>
</body>

</html>