<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" href="#">
    <title>..::Amir's edit json::..</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            background-color: #72787e;
            color: #fff;
            padding: 20px;
        }

        h1 {
            text-align: center;
            margin-bottom: 20px;
            color: #ffc107;
        }

        .container {
            width: 80%;
            margin: 0 auto;
            padding: 20px;
            background-color: #495057;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
            border-radius: 8px;
        }

        #jsonTableContainer {
            border: 2px solid #198754;
            padding: 10px;
            background-color: #6c757d;
            min-height: 100px;
            border-radius: 4px;
        }

        .row {
            display: flex;
            align-items: center;
            border-bottom: 1px solid #ddd;
            padding: 10px 0;
            transition: background-color 0.3s ease;
        }

        .row:nth-child(odd) {
            background-color: #6c757d;
        }

        .row:hover {
            background-color: #495057;
        }

        .column {
            flex: 1;
            text-align: center;
            padding: 5px;
            color: #fff;
        }

        .thumbnail {
            max-width: 50px;
            max-height: 50px;
            border-radius: 4px;
            cursor: pointer;
        }

        .delete-btn {
            color: #ff4d4d;
            cursor: pointer;
            font-weight: bold;
        }

        a {
            color: #ffc107;
            text-decoration: none;
        }

        a:hover {
            color: #fff;
            text-decoration: underline;
        }

        .download-btn {
            width: 100%;
            padding: 10px;
            background-color: #198754;
            color: #fff;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .download-btn:hover {
            background-color: #145d37;
        }

        .file-input {
            margin-bottom: 20px;
            display: block;
            padding: 10px;
            font-size: 14px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #fff;
            color: #333;
        }

        .header {
            font-weight: bold;
            background-color: #198754;
            color: #fff;
        }

        .add-row-btn {
            width: 100%;
            padding: 10px;
            background-color: #ffc107;
            color: #333;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 10px;
            transition: background 0.3s ease;
        }

        .add-row-btn:hover {
            background-color: #e0a800;
        }

        .image-input {
            width: 100%;
            padding: 5px;
            font-size: 14px;
            text-align: center;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            justify-content: center;
            align-items: center;
            z-index: 1000;
            overflow-y: auto;  /* ✅ allow scrolling when needed */
        }

        .modal-content {
            position: relative;
            width: 90%;
            max-width: 800px;
            background-color: #fff;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            color: #333;
            max-height: 90vh;   /* ✅ prevent it from going off screen */
            overflow-y: auto;   /* ✅ scroll inside modal if content too tall */
        }

        .modal img {
            max-width: 100%;
            max-height: 400px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .modal-close {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 20px;
            color: black;
            cursor: pointer;
        }

        .modal h2,
        .modal p {
            margin: 10px 0;
        }

        /* Form styling */
        .edit-form {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            text-align: left;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        .form-group textarea {
            height: 80px;
            resize: vertical;
        }

        .save-btn {
            grid-column: span 2;
            padding: 10px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 10px;
        }

        .save-btn:hover {
            background-color: #218838;
        }

        /* Drag-and-drop effects */
        .row.draggable {
            cursor: move;
        }

        .row.drag-over {
            background-color: #495057;
        }

        /* imageModal */
        .image-filename {
            margin-top: 10px;
            font-size: 14px;
            color: #333;
            text-align: center;
            font-weight: bold;
        }

        /*sorting*/
        .sortable {
            cursor: pointer;
            position: relative;
        }
        
        .sortable:after {
            content: ' ⇅';
            font-size: 0.8em;
            color: #ccc;
            position: absolute;
            right: 5px;
        }
        
        /* Hide the default file input */
        #uploadFileInput {
            display: none;
        }

        /* Style the file input trigger (the label) */
        label {
            display: inline-flex;
            align-items: center;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            font-size: 14px;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
        }

        label i {
            margin-right: 8px;
        }

        label:hover {
            background-color: #0056b3;
        }

        /* Style the upload button with an icon */
        #uploadFileBtn {
            display: inline-flex;
            align-items: center;
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            font-size: 14px;
            border-radius: 5px;
            cursor: pointer;
            border: none;
            margin-top: 10px;
        }

        #uploadFileBtn i {
            margin-right: 8px;
        }

        #uploadFileBtn:hover {
            background-color: #218838;
        }

        /* css for delete buttons*/
        .delete-btn {
            display: inline-flex;
            align-items: center;
            color: yellow;
            cursor: pointer;
            font-weight: bold;
        }

        .delete-btn i {
            margin-right: 8px;
        }

        .delete-btn:hover {
            color: red;
        }

        /* Dropdown styling */
        .country-dropdown {
            width: 100%;
            padding: 5px;
            font-size: 14px;
            text-align: center;
            background-color: #fff;
            color: #333;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        /* Drag and drop area styling */
        .drop-area {
            border: 2px dashed #ccc;
            border-radius: 4px;
            padding: 20px;
            text-align: center;
            background-color: #f8f9fa;
            color: #333;
            margin: 10px 0;
            cursor: pointer;
        }

        .drop-area.highlight {
            border-color: #007bff;
            background-color: #e9f0ff;
        }
        
        /* Currency type dropdown */
        .currency-dropdown {
            width: 100%;
            padding: 5px;
            font-size: 14px;
            text-align: center;
            background-color: #fff;
            color: #333;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        /* Image drop area in table */
        .image-drop-area {
            border: 2px dashed #ccc;
            border-radius: 4px;
            padding: 10px;
            text-align: center;
            background-color: #f8f9fa;
            color: #333;
            margin: 5px 0;
            cursor: pointer;
            min-height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .image-drop-area.highlight {
            border-color: #007bff;
            background-color: #e9f0ff;
        }

        .image-drop-area p {
            margin: 0;
            font-size: 12px;
        }
        
        /* Search box styling */
    .search-container {
        margin-bottom: 20px;
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
    }

    .search-box {
        width: 300px;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ddd;
        border-radius: 4px;
        background-color: #fff;
        color: #333;
    }

    .search-box:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
    }

    .clear-search-btn {
        padding: 10px;
        background-color: #dc3545;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .clear-search-btn:hover {
        background-color: #c82333;
    }
    
    .toast-message {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;                     /* full screen width */
        background-color: rgba(40, 167, 69, 0.5); /* ✅ more transparent */
        color: white;
        padding: 15px;
        text-align: center;
        font-size: 16px;
        font-weight: bold;
        z-index: 3000;
        opacity: 0;
        display: none;
        transition: opacity 0.5s ease;
    }


    </style>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
</head>

<body>
    <div id="toastMessage" class="toast-message">✅ Changes saved successfully!</div>

    <div class="container">
        <h1>JSON Viewer & Editor</h1>

        <div class="search-container">
            <input type="text" id="countrySearch" class="search-box" placeholder="Search by country...">
            <button id="clearSearch" class="clear-search-btn" title="Clear search">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <input type="file" id="jsonFileInput" class="file-input" accept=".json" />

        <label for="uploadFileInput">
            <i class="fas fa-file-upload"></i> Choose File
        </label>
        <input type="file" id="uploadFileInput" accept=".json" />

        <button id="uploadFileBtn">
            <i class="fas fa-upload"></i> Upload File
        </button>

        <div id="jsonTableContainer">Container is here</div>

        <button class="add-row-btn" id="addRowBtn">Add New Row</button>
        <button class="download-btn" id="downloadBtn">Download Updated JSON</button>
    </div>

    <div id="imageModal" class="modal">
        <div class="modal-content">
            <span id="closeModal" class="modal-close">&times;</span>
            <img id="modalImage" src="" alt="Enlarged Image">
            <div id="imageFileName" class="image-filename"></div>
            
            <div class="edit-form" id="editForm">
                
                <div class="form-group">
                    <label for="editCountry">Country:</label>
                    <select id="editCountry" name="country" class="country-dropdown"></select>
                </div>
                <div class="form-group">
                    <label for="editCurrencyType">Currency Type:</label>
                    <select id="editCurrencyType" name="currency_type" class="currency-dropdown">
                        <option value="coin">Coin</option>
                        <option value="paper-bill">Paper Bill</option>
                        <option value="antique">Antique</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="editDonorName">Donor Name:</label>
                    <input type="text" id="editDonorName" name="donor_name">
                </div>
                <div class="form-group">
                    <label for="editNote">Note:</label>
                    <textarea id="editNote" name="note"></textarea>
                </div>
                <div class="form-group">
                    <label for="editSize">Size:</label>
                    <input type="text" id="editSize" name="size">
                </div>
                <div class="form-group">
                    <label for="editYear">Year:</label>
                    <input type="text" id="editYear" name="year">
                </div>
                <div class="form-group" style="grid-column: span 2;">
                    <label for="editImage">Image:</label>
                    <div class="drop-area" id="imageDropArea">
                        <p>Drag & drop an image here or click to select</p>
                        <input type="file" id="editImageInput" accept="image/*" style="display: none;">
                    </div>
                </div>
                <button type="button" class="save-btn" id="saveChangesBtn">Save Changes</button>
            </div>
        </div>
    </div>

    <script>
        document.getElementById("uploadFileBtn").addEventListener("click", function () {
            const fileInput = document.getElementById("uploadFileInput");
            const file = fileInput.files[0];

            if (!file) {
                alert("Please select a file to upload.");
                return;
            }

            const formData = new FormData();
            formData.append("file", file);

            fetch('/upload-json', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.message) {
                        alert(data.message);
                        fetch('/get-json')
                            .then(response => response.json())
                            .then(newData => {
                                jsonData = newData;
                                renderTable(jsonData);
                            });
                    } else {
                        alert(data.error || "An error occurred.");
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    alert("An error occurred while uploading the file.");
                });
        });

        document.getElementById("jsonFileInput").addEventListener("change", function (event) {
            const file = event.target.files[0];

            if (!file) {
                alert("No file selected. Please select a JSON file.");
                return;
            }

            if (file.type !== "application/json") {
                alert("Invalid file type. Please upload a valid JSON file.");
                return;
            }

            const reader = new FileReader();
            reader.onload = function (e) {
                try {
                    jsonData = JSON.parse(e.target.result);
                    renderTable(jsonData);
                } catch (error) {
                    alert("Error parsing JSON file. Please check the file format.");
                    console.error("JSON Parsing Error:", error);
                }
            };

            reader.onerror = function () {
                alert("Error reading the file. Please try again.");
            };

            reader.readAsText(file);
        });

        let jsonData = [];
        let sortOrder = 1;
        let currentEditingIndex = -1;
        let countriesData = [];

        // Load countries data
        function loadCountries() {
            fetch('/get-countries')
                .then(response => response.json())
                .then(data => {
                    countriesData = data;
                    populateCountryDropdowns();
                })
                .catch(error => {
                    console.error("Error loading countries:", error);
                });
        }

        // Populate country dropdowns
        function populateCountryDropdowns() {
            const editCountryDropdown = document.getElementById('editCountry');
            
            // Clear existing options
            editCountryDropdown.innerHTML = '';
            
            // Add default option
            const defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.textContent = 'Select a country';
            editCountryDropdown.appendChild(defaultOption);
            
            // Add countries
            countriesData.forEach(country => {
                const option = document.createElement('option');
                option.value = country.name;
                option.textContent = country.name;
                editCountryDropdown.appendChild(option);
            });
        }

        function renderTable(data) {
            const tableContainer = document.getElementById("jsonTableContainer");
            tableContainer.innerHTML = '';
        
            const headerRow = document.createElement('div');
            headerRow.classList.add('row', 'header');
            const headers = [
                { text: 'Country', key: 'country' },
                { text: 'Currency Type', key: 'currency_type' },
                { text: 'Donor Name', key: 'donor_name' },
                { text: 'Image', key: 'image' },
                { text: 'Note', key: 'note' },
                { text: 'Size', key: 'size' },
                { text: 'Year', key: 'year' },
                { text: 'Actions', key: null }
            ];
            
            headers.forEach(header => {
                const column = document.createElement('div');
                column.classList.add('column');
                column.textContent = header.text;
                if (header.key) {
                    column.dataset.key = header.key;
                    column.classList.add('sortable');
                    column.addEventListener('click', () => {
                        sortTable(header.key);
                    });
                }
                headerRow.appendChild(column);
            });
            tableContainer.appendChild(headerRow);
        
            data.forEach((row, index) => {
                const rowDiv = document.createElement('div');
                rowDiv.classList.add('row');
                rowDiv.draggable = true;
                rowDiv.setAttribute('data-index', index);
        
                rowDiv.addEventListener('dragstart', handleDragStart);
                rowDiv.addEventListener('dragover', handleDragOver);
                rowDiv.addEventListener('drop', handleDrop);
        
                // Country dropdown
                const countryColumn = document.createElement('div');
                countryColumn.classList.add('column');
                const countrySelect = document.createElement('select');
                countrySelect.classList.add('country-dropdown');

                //countrySelect.addEventListener('change', function() {
                //    row.country = this.value;
                //    saveUpdates();
                //});

                countrySelect.addEventListener('change', function() {
                const oldCountry = row.country;
                const newCountry = this.value;
                const image = row.image;

                if (!image || image === "placeholder.jpg") {
                    // Just update JSON if no real image
                    row.country = newCountry;
                    saveUpdates();
                    return;
                }

                fetch('/update-country', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        image: image,
                        old_country: oldCountry,
                        new_country: newCountry
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        alert("Error: " + data.error);
                        this.value = oldCountry; // revert if failed
                    } else {
                        console.log(data.message);
                        row.country = newCountry;
                        renderTable(jsonData);
                    }
                })
                .catch(error => {
                    console.error("Error updating country:", error);
                    this.value = oldCountry; // revert if error
                });
            });


                
                // Add default option
                const defaultOption = document.createElement('option');
                defaultOption.value = '';
                defaultOption.textContent = 'Select country';
                countrySelect.appendChild(defaultOption);
                
                // Add countries
                countriesData.forEach(country => {
                    const option = document.createElement('option');
                    option.value = country.name;
                    option.textContent = country.name;
                    if (row.country === country.name) {
                        option.selected = true;
                    }
                    countrySelect.appendChild(option);
                });
                
                // If country is not in the list, add it as an option
                if (row.country && !countriesData.some(c => c.name === row.country)) {
                    const option = document.createElement('option');
                    option.value = row.country;
                    option.textContent = row.country;
                    option.selected = true;
                    countrySelect.appendChild(option);
                }
                
                countryColumn.appendChild(countrySelect);
                rowDiv.appendChild(countryColumn);
                
                // Currency type dropdown
                const currencyColumn = document.createElement('div');
                currencyColumn.classList.add('column');
                const currencySelect = document.createElement('select');
                currencySelect.classList.add('currency-dropdown');
                currencySelect.addEventListener('change', function() {
                    row.currency_type = this.value;
                    saveUpdates();
                });
                
                const currencyOptions = ['coin', 'paper-bill', 'antique'];
                currencyOptions.forEach(optionValue => {
                    const option = document.createElement('option');
                    option.value = optionValue;
                    option.textContent = optionValue.charAt(0).toUpperCase() + optionValue.slice(1);
                    if (row.currency_type === optionValue) {
                        option.selected = true;
                    }
                    currencySelect.appendChild(option);
                });
                
                currencyColumn.appendChild(currencySelect);
                rowDiv.appendChild(currencyColumn);
                
                // Donor name (editable)
                const donorColumn = document.createElement('div');
                donorColumn.classList.add('column', 'editable');
                donorColumn.textContent = row.donor_name || "No Donor Name";
                donorColumn.contentEditable = true;
                donorColumn.addEventListener('blur', function() {
                    row.donor_name = this.textContent;
                    saveUpdates();
                });
                rowDiv.appendChild(donorColumn);
                
                // Image column with drag and drop
                const imageColumn = document.createElement('div');
                imageColumn.classList.add('column');
                
                // ✅ Always show drop area (whether image exists or not)
                const dropArea = document.createElement('div');
                dropArea.classList.add('image-drop-area');
                dropArea.setAttribute('data-index', index);

                if (row.image && row.image !== 'placeholder.jpg') {
                    dropArea.innerHTML = `<img src="images/${row.country}/${row.image}" 
                                        class="thumbnail" 
                                        data-index="${index}" 
                                        onerror="this.src='images/placeholder.jpg'">`;
                } else {
                    dropArea.innerHTML = '<p>Drag & drop image here</p>';
                }

                // Enable drag & drop on this area
                setupImageDropArea(dropArea, row, index);

                imageColumn.appendChild(dropArea);

                
                rowDiv.appendChild(imageColumn);
                
                // Note (editable)
                const noteColumn = document.createElement('div');
                noteColumn.classList.add('column', 'editable');
                noteColumn.textContent = row.note || "No Note";
                noteColumn.contentEditable = true;
                noteColumn.addEventListener('blur', function() {
                    row.note = this.textContent;
                    saveUpdates();
                });
                rowDiv.appendChild(noteColumn);
                
                // Size (editable)
                const sizeColumn = document.createElement('div');
                sizeColumn.classList.add('column', 'editable');
                sizeColumn.textContent = row.size || "No Size";
                sizeColumn.contentEditable = true;
                sizeColumn.addEventListener('blur', function() {
                    row.size = this.textContent;
                    saveUpdates();
                });
                rowDiv.appendChild(sizeColumn);
                
                // Year (editable)
                const yearColumn = document.createElement('div');
                yearColumn.classList.add('column', 'editable');
                yearColumn.textContent = row.year || "No Year";
                yearColumn.contentEditable = true;
                yearColumn.addEventListener('blur', function() {
                    row.year = this.textContent;
                    saveUpdates();
                });
                rowDiv.appendChild(yearColumn);
                
                // Actions (delete button)
                const actionColumn = document.createElement('div');
                actionColumn.classList.add('column');
                const deleteBtn = document.createElement('span');
                deleteBtn.classList.add('delete-btn');
                deleteBtn.innerHTML = '<i class="fas fa-trash"></i>';
                deleteBtn.addEventListener('click', function() {
                    if (confirm('Are you sure you want to delete this entry?')) {
                        jsonData.splice(index, 1);
                        renderTable(jsonData);
                        saveUpdates();
                    }
                });
                actionColumn.appendChild(deleteBtn);
                rowDiv.appendChild(actionColumn);
        
                tableContainer.appendChild(rowDiv);
            });
        }
        
        // Setup image drop area functionality
        function setupImageDropArea(dropArea, row, index) {
                      
            const fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.accept = 'image/*';
            fileInput.style.display = 'none';
            document.body.appendChild(fileInput);
            
            // Click to select file
            dropArea.addEventListener('click', () => {
                fileInput.click();
            });
            
            // Drag and drop events
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, preventDefaults, false);
            });
            
            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }
            
            ['dragenter', 'dragover'].forEach(eventName => {
                dropArea.addEventListener(eventName, highlight, false);
            });
            
            ['dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, unhighlight, false);
            });
            
            function highlight() {
                dropArea.classList.add('highlight');
            }
            
            function unhighlight() {
                dropArea.classList.remove('highlight');
            }
            
            // Handle file drop
            dropArea.addEventListener('drop', handleDropFile, false);
            
            // Handle file selection
            fileInput.addEventListener('change', handleFileSelect, false);
            
            function handleDropFile(e) {
                const dt = e.dataTransfer;
                const files = dt.files;
                handleFiles(files, row, index);
            }
            
            function handleFileSelect(e) {
                const files = e.target.files;
                handleFiles(files, row, index);
            }
            
            function handleFiles(files, row, index) {
                if (files.length === 0) return;
                            
                const file = files[0];
                const country = row.country;
                            
                if (!country) {
                    alert('Please select a country first');
                    return;
                }
                            
                const formData = new FormData();
                formData.append('file', file);
                formData.append('country', country);

                // ✅ If this row already has an image, tell backend to replace it
                if (row.image && row.image !== "placeholder.jpg") {
                    formData.append('existing_image', row.image);
                }

                fetch('/upload-image', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        alert('Error uploading image: ' + data.error);
                    } else {
                        // Update JSON with new filename
                        jsonData[index].image = data.filename;
                        renderTable(jsonData);
                        saveUpdates();
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error uploading image');
                });
            }

        }
        
        function sortTable(key) {
            jsonData.sort((a, b) => {
                if (a[key] < b[key]) return -1 * sortOrder;
                if (a[key] > b[key]) return 1 * sortOrder;
                return 0;
            });
            sortOrder *= -1;
            renderTable(jsonData);
            
            fetch('/update-json', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(jsonData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.message) {
                    console.log('Backend JSON updated successfully:', data.message);
                } else {
                    console.error('Error updating JSON:', data.error);
                    alert(`Error updating JSON: ${data.error}`);
                }
            })
            .catch(error => {
                console.error('Error with fetch request:', error);
                alert('An error occurred while updating the JSON file.');
            });
        }
        
        function handleDragStart(e) {
            e.dataTransfer.setData('text/plain', e.target.getAttribute('data-index'));
        }

        function handleDragOver(e) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
        }

        function handleDrop(e) {
            e.preventDefault();
            const draggedIndex = e.dataTransfer.getData('text/plain');
            const targetIndex = e.target.closest('.row').getAttribute('data-index');

            if (draggedIndex !== targetIndex) {
                const draggedItem = jsonData.splice(draggedIndex, 1)[0];
                jsonData.splice(targetIndex, 0, draggedItem);
                renderTable(jsonData);
                saveUpdates();
            }
        }

        function showToast(message) {
            const toast = document.getElementById("toastMessage");
            toast.textContent = "✅ " + message;
            toast.style.display = "block";
            toast.style.opacity = "1";

            // Fade out after 3 seconds
            setTimeout(() => {
                toast.style.opacity = "0";
            }, 3000);

            // Fully hide after fade
            setTimeout(() => {
                toast.style.display = "none";
            }, 4000);
        }

        function saveUpdates() {
            fetch('/update-json', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(jsonData),
            })
            .then(response => response.json())
            .then(data => {
                console.log(data.message || "File updated.");
                showToast(data.message || "Changes saved!");
            })
            .catch(error => {
                console.error("Error:", error);
                showToast("❌ Error saving changes!");
            });
        }



        // Handle image upload via drag and drop in modal
        function setupModalImageUpload() {
            const dropArea = document.getElementById('imageDropArea');
            const fileInput = document.getElementById('editImageInput');
            
            // Click to select file
            dropArea.addEventListener('click', () => {
                fileInput.click();
            });
            
            // Drag and drop events
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, preventDefaults, false);
            });
            
            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }
            
            ['dragenter', 'dragover'].forEach(eventName => {
                dropArea.addEventListener(eventName, highlight, false);
            });
            
            ['dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, unhighlight, false);
            });
            
            function highlight() {
                dropArea.classList.add('highlight');
            }
            
            function unhighlight() {
                dropArea.classList.remove('highlight');
            }
            
            // Handle file drop
            dropArea.addEventListener('drop', handleDropFile, false);
            
            // Handle file selection
            fileInput.addEventListener('change', handleFileSelect, false);
            
            function handleDropFile(e) {
                const dt = e.dataTransfer;
                const files = dt.files;
                handleFiles(files);
            }
            
            function handleFileSelect(e) {
                const files = e.target.files;
                handleFiles(files);
            }
            
            function handleFiles(files) {
                if (files.length === 0) return;
                
                const file = files[0];
                const country = document.getElementById('editCountry').value;
                
                if (!country) {
                    alert('Please select a country first');
                    return;
                }
                
                const formData = new FormData();
                formData.append('file', file);
                formData.append('country', country);
                
                // ✅ Add existing image filename if editing an existing row
                if (currentEditingIndex !== -1 && jsonData[currentEditingIndex].image && jsonData[currentEditingIndex].image !== "placeholder.jpg") {
                    formData.append('existing_image', jsonData[currentEditingIndex].image);
                }
                
                fetch('/upload-image', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        alert('Error uploading image: ' + data.error);
                    } else {
                        alert('Image uploaded successfully: ' + data.filename);
                        // Update the image in the current editing row
                        if (currentEditingIndex !== -1) {
                            jsonData[currentEditingIndex].image = data.filename;
                            renderTable(jsonData);
                            saveUpdates();
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error uploading image');
                });
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            fetch('/get-json')
                .then(response => response.json())
                .then(data => {
                    jsonData = data;
                    renderTable(jsonData);
                })
                .catch(error => {
                    console.error("Error fetching JSON data:", error);
                });

            // Load countries data
            loadCountries();
            
            // Setup image upload functionality
            setupModalImageUpload();
            
            // Setup auto-save for modal fields
            setupModalAutoSave();


            document.getElementById("addRowBtn").addEventListener("click", function () {
                const newRow = {
                    country: "",
                    currency_type: "coin",
                    donor_name: "New Donor Name",
                    image: "placeholder.jpg",
                    note: "New Note",
                    size: "",
                    year: ""
                };
                jsonData.push(newRow);
                renderTable(jsonData);
                saveUpdates();
            });

            document.getElementById("downloadBtn").addEventListener("click", function () {
                const jsonString = JSON.stringify(jsonData, null, 2);
                const blob = new Blob([jsonString], { type: "application/json" });
                const url = URL.createObjectURL(blob);
                const a = document.createElement("a");
                a.href = url;
                a.download = "coins.json";
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            });

            document.getElementById("closeModal").addEventListener("click", function () {
                document.getElementById("imageModal").style.display = "none";
            });

            function setupModalAutoSave() {
                const fields = [
                    { id: "editCountry", key: "country" },
                    { id: "editCurrencyType", key: "currency_type" },
                    { id: "editDonorName", key: "donor_name" },
                    { id: "editNote", key: "note" },
                    { id: "editSize", key: "size" },
                    { id: "editYear", key: "year" }
                ];

                fields.forEach(field => {
                    const el = document.getElementById(field.id);

                    // For text inputs & textarea → blur event
                    if (el.tagName === "INPUT" || el.tagName === "TEXTAREA") {
                        el.addEventListener("blur", function () {
                            if (currentEditingIndex !== -1) {
                                jsonData[currentEditingIndex][field.key] = this.value;
                                renderTable(jsonData);
                                saveUpdates();
                            }
                        });
                    }

                    // For dropdowns → change event
                    if (el.tagName === "SELECT") {
                        el.addEventListener("change", function () {
                            if (currentEditingIndex !== -1) {
                                jsonData[currentEditingIndex][field.key] = this.value;
                                renderTable(jsonData);
                                saveUpdates();
                            }
                        });
                    }
                });
            }


            document.addEventListener("click", function (event) {
                if (event.target.classList.contains("thumbnail")) {
                    const index = event.target.getAttribute("data-index");
                    const row = jsonData[index];
                    
                    document.getElementById("modalImage").src = `images/${row.country}/${row.image}`;
                    document.getElementById("imageFileName").textContent = row.image;
                    
                    // Populate form fields
                    document.getElementById("editCountry").value = row.country || "";
                    document.getElementById("editCurrencyType").value = row.currency_type || "";
                    document.getElementById("editDonorName").value = row.donor_name || "";
                    document.getElementById("editNote").value = row.note || "";
                    document.getElementById("editSize").value = row.size || "";
                    document.getElementById("editYear").value = row.year || "";
                    
                    currentEditingIndex = index;
                    document.getElementById("imageModal").style.display = "flex";
                }
            });
        });
        
        // Search functionality
document.getElementById("countrySearch").addEventListener("input", function() {
    filterTableByCountry(this.value);
});

document.getElementById("clearSearch").addEventListener("click", function() {
    document.getElementById("countrySearch").value = "";
    filterTableByCountry("");
});

function filterTableByCountry(searchTerm) {
    const searchTermLower = searchTerm.toLowerCase();
    
    if (!searchTermLower) {
        // If search is empty, show all rows
        document.querySelectorAll('.row:not(.header)').forEach(row => {
            row.style.display = 'flex';
        });
        return;
    }
    
    // Filter rows based on country
    document.querySelectorAll('.row:not(.header)').forEach(row => {
        const countrySelect = row.querySelector('.country-dropdown');
        const countryValue = countrySelect ? countrySelect.value.toLowerCase() : '';
        
        if (countryValue.includes(searchTermLower)) {
            row.style.display = 'flex';
        } else {
            row.style.display = 'none';
        }
    });
}
    </script>
</body>

</html>