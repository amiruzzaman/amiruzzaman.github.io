<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" href="#">
    <title>..::Amir's edit json::..</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            background-color: #72787e;
            color: #fff;
            padding: 20px;
        }

        h1 {
            text-align: center;
            margin-bottom: 20px;
            color: #ffc107;
        }

        .container {
            width: 80%;
            margin: 0 auto;
            padding: 20px;
            background-color: #495057;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
            border-radius: 8px;
        }

        #jsonTableContainer {
            border: 2px solid #198754;
            padding: 10px;
            background-color: #6c757d;
            min-height: 100px;
            border-radius: 4px;
        }

        .row {
            display: flex;
            align-items: center;
            border-bottom: 1px solid #ddd;
            padding: 10px 0;
            transition: background-color 0.3s ease;
        }

        .row:nth-child(odd) {
            background-color: #6c757d;
        }

        .row:hover {
            background-color: #495057;
        }

        .column {
            flex: 1;
            text-align: center;
            padding: 5px;
            color: #fff;
        }

        .thumbnail {
            max-width: 50px;
            max-height: 50px;
            border-radius: 4px;
            cursor: pointer;
        }

        .delete-btn {
            color: #ff4d4d;
            cursor: pointer;
            font-weight: bold;
        }

        a {
            color: #ffc107;
            text-decoration: none;
        }

        a:hover {
            color: #fff;
            text-decoration: underline;
        }

        .download-btn {
            width: 100%;
            padding: 10px;
            background-color: #198754;
            color: #fff;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .download-btn:hover {
            background-color: #145d37;
        }

        .file-input {
            margin-bottom: 20px;
            display: block;
            padding: 10px;
            font-size: 14px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #fff;
            color: #333;
        }

        .header {
            font-weight: bold;
            background-color: #198754;
            color: #fff;
        }

        .add-row-btn {
            width: 100%;
            padding: 10px;
            background-color: #ffc107;
            color: #333;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 10px;
            transition: background 0.3s ease;
        }

        .add-row-btn:hover {
            background-color: #e0a800;
        }

        .image-input {
            width: 100%;
            padding: 5px;
            font-size: 14px;
            text-align: center;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            justify-content: center;
            align-items: center;
            z-index: 1000;
            overflow-y: auto;
        }

        .modal-content {
            position: relative;
            width: 90%;
            max-width: 800px;
            background-color: #fff;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            color: #333;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal img {
            max-width: 100%;
            max-height: 400px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .modal-close {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 20px;
            color: black;
            cursor: pointer;
        }

        .modal h2,
        .modal p {
            margin: 10px 0;
        }

        /* Form styling */
        .edit-form {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            text-align: left;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        .form-group textarea {
            height: 80px;
            resize: vertical;
        }

        .save-btn {
            grid-column: span 2;
            padding: 10px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 10px;
        }

        .save-btn:hover {
            background-color: #218838;
        }

        /* Drag-and-drop effects */
        .row.draggable {
            cursor: move;
        }

        .row.drag-over {
            background-color: #495057;
        }

        /* imageModal */
        .image-filename {
            margin-top: 10px;
            font-size: 14px;
            color: #333;
            text-align: center;
            font-weight: bold;
        }

        /*sorting*/
        .sortable {
            cursor: pointer;
            position: relative;
        }
        
        .sortable:after {
            content: ' â‡…';
            font-size: 0.8em;
            color: #ccc;
            position: absolute;
            right: 5px;
        }
        
        /* Hide the default file input */
        #uploadFileInput {
            display: none;
        }

        /* Style the file input trigger (the label) */
        label {
            display: inline-flex;
            align-items: center;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            font-size: 14px;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
        }

        label i {
            margin-right: 8px;
        }

        label:hover {
            background-color: #0056b3;
        }

        /* Style the upload button with an icon */
        #uploadFileBtn {
            display: inline-flex;
            align-items: center;
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            font-size: 14px;
            border-radius: 5px;
            cursor: pointer;
            border: none;
            margin-top: 10px;
        }

        #uploadFileBtn i {
            margin-right: 8px;
        }

        #uploadFileBtn:hover {
            background-color: #218838;
        }

        /* css for delete buttons*/
        .delete-btn {
            display: inline-flex;
            align-items: center;
            color: yellow;
            cursor: pointer;
            font-weight: bold;
        }

        .delete-btn i {
            margin-right: 8px;
        }

        .delete-btn:hover {
            color: red;
        }

        /* Dropdown styling */
        .country-dropdown {
            width: 100%;
            padding: 5px;
            font-size: 14px;
            text-align: center;
            background-color: #fff;
            color: #333;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        /* Drag and drop area styling */
        .drop-area {
            border: 2px dashed #ccc;
            border-radius: 4px;
            padding: 20px;
            text-align: center;
            background-color: #f8f9fa;
            color: #333;
            margin: 10px 0;
            cursor: pointer;
        }

        .drop-area.highlight {
            border-color: #007bff;
            background-color: #e9f0ff;
        }
        
        /* Currency type dropdown */
        .currency-dropdown {
            width: 100%;
            padding: 5px;
            font-size: 14px;
            text-align: center;
            background-color: #fff;
            color: #333;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        /* Image drop area in table */
        .image-drop-area {
            border: 2px dashed #ccc;
            border-radius: 4px;
            padding: 10px;
            text-align: center;
            background-color: #f8f9fa;
            color: #333;
            margin: 5px 0;
            cursor: pointer;
            min-height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .image-drop-area.highlight {
            border-color: #007bff;
            background-color: #e9f0ff;
        }

        .image-drop-area p {
            margin: 0;
            font-size: 12px;
        }
        
        /* Search box styling */
        .search-container {
            margin-bottom: 20px;
            display: flex;
            justify-content: flex-start;
            align-items: center;
            gap: 10px;
            flex-wrap: wrap;
        }

        .search-box {
            width: 250px;
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #fff;
            color: #333;
        }

        .search-box:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
        }

        .clear-search-btn {
            padding: 10px 15px;
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .clear-search-btn:hover {
            background-color: #c82333;
        }
        
        .toast-message {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background-color: rgba(40, 167, 69, 0.5);
            color: white;
            padding: 15px;
            text-align: center;
            font-size: 16px;
            font-weight: bold;
            z-index: 3000;
            opacity: 0;
            display: none;
            transition: opacity 0.5s ease;
        }

        .search-options {
            margin-left: 10px;
        }

        .search-options label {
            color: #fff;
            font-size: 14px;
            display: flex;
            align-items: center;
        }

        .search-options input[type="checkbox"] {
            margin-right: 5px;
        }

        .advanced-search-container {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #5a6268;
            border-radius: 4px;
            width: 100%;
        }

        .advanced-search-container h3 {
            color: #ffc107;
            margin-bottom: 10px;
            font-size: 16px;
        }

        .advanced-search-fields {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 10px;
            align-items: end;
        }

        .search-field {
            display: flex;
            flex-direction: column;
        }

        .search-field label {
            color: #fff;
            margin-bottom: 5px;
            font-size: 14px;
        }

        .search-select {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #fff;
            color: #333;
        }

        .search-btn {
            padding: 8px 15px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        .search-btn.clear {
            background-color: #dc3545;
        }

        .search-btn:hover {
            opacity: 0.9;
        }

        .filter-indicator {
            margin-top: 10px;
            padding: 8px;
            background-color: #17a2b8;
            border-radius: 4px;
            color: white;
            font-size: 14px;
            width: 100%;
        }

        .filter-tag {
            display: inline-block;
            background-color: #6c757d;
            padding: 3px 8px;
            border-radius: 12px;
            margin: 0 5px;
            font-size: 12px;
        }

        .filter-tag .close {
            margin-left: 5px;
            cursor: pointer;
        }

        .loading {
            text-align: center;
            padding: 20px;
            color: #ffc107;
            font-size: 18px;
        }

        /* File upload section styling */
        .file-upload-section {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            align-items: center;
            margin-bottom: 20px;
        }

        /* Editable cells */
        .editable {
            cursor: text;
            min-height: 20px;
        }

        .editable:focus {
            outline: 2px solid #007bff;
            background-color: #f8f9fa;
            color: #333;
        }

        /* Responsive adjustments */
        @media (max-width: 992px) {
            .container {
                width: 95%;
                padding: 15px;
            }
            
            .search-container {
                flex-direction: column;
                align-items: stretch;
            }
            
            .search-box {
                width: 100%;
            }
            
            .advanced-search-fields {
                grid-template-columns: 1fr;
            }
            
            .file-upload-section {
                flex-direction: column;
                align-items: stretch;
            }
            
            .row {
                flex-wrap: wrap;
            }
            
            .column {
                flex: 1 0 33.333%;
                min-width: 120px;
            }
        }

        @media (max-width: 576px) {
            .column {
                flex: 1 0 50%;
            }
        }
    </style>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
</head>

<body>
    <div id="toastMessage" class="toast-message">âœ… Changes saved successfully!</div>

    <div class="container">
        <h1>JSON Viewer & Editor</h1>

        <div class="search-container">
            <input type="text" id="countrySearch" class="search-box" placeholder="Search by country...">
            <button id="clearSearch" class="clear-search-btn" title="Clear search">
                <i class="fas fa-times"></i>
            </button>
            <div class="search-options">
                <label>
                    <input type="checkbox" id="keepFilteredView"> Keep Filtered View
                </label>
            </div>
        </div>

        <div class="advanced-search-container">
            <h3>Advanced Search</h3>
            <div class="advanced-search-fields">
                <div class="search-field">
                    <label for="sizeSearch">Size:</label>
                    <input type="text" id="sizeSearch" class="search-box" placeholder="e.g., 25 or 25x30">
                </div>
                <div class="search-field">
                    <label for="yearSearch">Year:</label>
                    <input type="text" id="yearSearch" class="search-box" placeholder="e.g., 1999 or 2000-2010">
                </div>
                <div class="search-field">
                    <label for="currencyTypeSearch">Currency Type:</label>
                    <select id="currencyTypeSearch" class="search-select">
                        <option value="">All Types</option>
                        <option value="coin">Coin</option>
                        <option value="paper-bill">Paper Bill</option>
                        <option value="antique">Antique</option>
                    </select>
                </div>
                <button id="applyAdvancedSearch" class="search-btn">Apply Advanced Filters</button>
                <button id="clearAdvancedSearch" class="search-btn clear">Clear All Filters</button>
            </div>
        </div>
        
        <div id="filterIndicator" class="filter-indicator" style="display: none;"></div>

        <div class="file-upload-section">
            <input type="file" id="jsonFileInput" class="file-input" accept=".json" />
            <label for="uploadFileInput">
                <i class="fas fa-file-upload"></i> Choose File
            </label>
            <input type="file" id="uploadFileInput" accept=".json" />
            <button id="uploadFileBtn">
                <i class="fas fa-upload"></i> Upload File
            </button>
        </div>

        <div id="jsonTableContainer">
            <div class="loading">
                <i class="fas fa-spinner fa-spin"></i> Loading coins data...
            </div>
        </div>

        <button class="add-row-btn" id="addRowBtn">Add New Row</button>
        <button class="download-btn" id="downloadBtn">Download Updated JSON</button>
    </div>

    <div id="imageModal" class="modal">
        <div class="modal-content">
            <span id="closeModal" class="modal-close">&times;</span>
            <img id="modalImage" src="" alt="Enlarged Image">
            <div id="imageFileName" class="image-filename"></div>
            
            <div class="edit-form" id="editForm">
                
                <div class="form-group">
                    <label for="editCountry">Country:</label>
                    <select id="editCountry" name="country" class="country-dropdown"></select>
                </div>
                <div class="form-group">
                    <label for="editCurrencyType">Currency Type:</label>
                    <select id="editCurrencyType" name="currency_type" class="currency-dropdown">
                        <option value="coin">Coin</option>
                        <option value="paper-bill">Paper Bill</option>
                        <option value="antique">Antique</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="editDonorName">Donor Name:</label>
                    <input type="text" id="editDonorName" name="donor_name">
                </div>
                <div class="form-group">
                    <label for="editNote">Note:</label>
                    <textarea id="editNote" name="note"></textarea>
                </div>
                <div class="form-group">
                    <label for="editSize">Size:</label>
                    <input type="text" id="editSize" name="size">
                </div>
                <div class="form-group">
                    <label for="editYear">Year:</label>
                    <input type="text" id="editYear" name="year">
                </div>
                <div class="form-group" style="grid-column: span 2;">
                    <label for="editImage">Image:</label>
                    <div class="drop-area" id="imageDropArea">
                        <p>Drag & drop an image here or click to select</p>
                        <input type="file" id="editImageInput" accept="image/*" style="display: none;">
                    </div>
                </div>
                <button type="button" class="save-btn" id="saveChangesBtn">Save Changes</button>
            </div>
        </div>
    </div>

    <script>
        let jsonData = [];
        let currentEditIndex = -1;
        let isFiltered = false;
        let activeFilters = {};

        // Function to load the default JSON file
        function loadDefaultJSON() {
            fetch('./images/coins.json')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to load coins.json');
                    }
                    return response.json();
                })
                .then(data => {
                    jsonData = data;
                    populateTable(jsonData);
                    showToast('Data loaded successfully!');
                })
                .catch(error => {
                    console.error('Error loading coins.json:', error);
                    document.getElementById('jsonTableContainer').innerHTML = `
                        <div style="text-align: center; padding: 20px; color: #ff6b6b;">
                            <i class="fas fa-exclamation-triangle"></i> Error loading coins.json: ${error.message}
                            <p>Please upload a JSON file manually</p>
                        </div>
                    `;
                });
        }

        // Function to populate the table with JSON data
        function populateTable(data) {
            const container = document.getElementById('jsonTableContainer');
            
            if (!data || data.length === 0) {
                container.innerHTML = '<p>No data available</p>';
                return;
            }

            // Create table with headers
            let tableHTML = `
                <div class="row header">
                    <div class="column sortable" data-sort="country">Country</div>
                    <div class="column sortable" data-sort="currency_type">Type</div>
                    <div class="column sortable" data-sort="donor_name">Donor</div>
                    <div class="column">Image</div>
                    <div class="column sortable" data-sort="note">Note</div>
                    <div class="column sortable" data-sort="size">Size</div>
                    <div class="column sortable" data-sort="year">Year</div>
                    <div class="column">Actions</div>
                </div>
            `;

            // Add rows for each data item
            data.forEach((item, index) => {
                // Use relative path for images if they're in the images folder
                const imagePath = item.image && item.image !== 'placeholder.jpg' ? 
                    `images/${item.country}/${item.image}` : 
                    'https://via.placeholder.com/50?text=No+Image';
                
                tableHTML += `
                    <div class="row draggable" draggable="true" data-index="${index}">
                        <div class="column editable" contenteditable="true" onblur="updateField(${index}, 'country', this.innerText)">${item.country || ''}</div>
                        <div class="column editable" contenteditable="true" onblur="updateField(${index}, 'currency_type', this.innerText)">${item.currency_type || ''}</div>
                        <div class="column editable" contenteditable="true" onblur="updateField(${index}, 'donor_name', this.innerText)">${item.donor_name || ''}</div>
                        <div class="column">
                            <img src="${imagePath}" 
                                 alt="Thumbnail" class="thumbnail" 
                                 onerror="this.src='https://via.placeholder.com/50?text=Error'"
                                 onclick="openModal('${imagePath}', ${index})">
                        </div>
                        <div class="column editable" contenteditable="true" onblur="updateField(${index}, 'note', this.innerText)">${item.note || ''}</div>
                        <div class="column editable" contenteditable="true" onblur="updateField(${index}, 'size', this.innerText)">${item.size || ''}</div>
                        <div class="column editable" contenteditable="true" onblur="updateField(${index}, 'year', this.innerText)">${item.year || ''}</div>
                        <div class="column">
                            <span class="delete-btn" onclick="deleteRow(${index})">
                                <i class="fas fa-trash"></i> Delete
                            </span>
                        </div>
                    </div>
                `;
            });

            container.innerHTML = tableHTML;
            
            // Add sorting functionality
            document.querySelectorAll('.sortable').forEach(header => {
                header.addEventListener('click', () => {
                    const field = header.getAttribute('data-sort');
                    sortTable(field);
                });
            });
            
            // Add drag and drop functionality
            setupDragAndDrop();
        }

        // Function to update field when editing inline
        function updateField(index, field, value) {
            if (index >= 0 && index < jsonData.length) {
                jsonData[index][field] = value;
                showToast('Field updated!');
            }
        }

        // Function to sort the table
        function sortTable(field) {
            jsonData.sort((a, b) => {
                if (a[field] < b[field]) return -1;
                if (a[field] > b[field]) return 1;
                return 0;
            });
            
            // Check if we're in filtered view
            if (isFiltered && document.getElementById('keepFilteredView').checked) {
                // Apply the same filter again after sorting
                applyFilters();
            } else {
                populateTable(jsonData);
            }
        }

        // Function to setup drag and drop
        function setupDragAndDrop() {
            const rows = document.querySelectorAll('.row.draggable');
            const container = document.getElementById('jsonTableContainer');
            
            let draggedItem = null;
            
            rows.forEach(row => {
                // Drag start event
                row.addEventListener('dragstart', function(e) {
                    draggedItem = row;
                    setTimeout(() => {
                        row.style.opacity = '0.5';
                    }, 0);
                });
                
                // Drag end event
                row.addEventListener('dragend', function() {
                    draggedItem = null;
                    setTimeout(() => {
                        row.style.opacity = '1';
                    }, 0);
                });
                
                // Drag over event
                row.addEventListener('dragover', function(e) {
                    e.preventDefault();
                });
                
                // Drag enter event
                row.addEventListener('dragenter', function(e) {
                    e.preventDefault();
                    this.style.backgroundColor = '#495057';
                });
                
                // Drag leave event
                row.addEventListener('dragleave', function() {
                    this.style.backgroundColor = '';
                });
                
                // Drop event
                row.addEventListener('drop', function(e) {
                    e.preventDefault();
                    this.style.backgroundColor = '';
                    
                    if (draggedItem && draggedItem !== this) {
                        // Get the indices of the dragged item and the drop target
                        const fromIndex = parseInt(draggedItem.getAttribute('data-index'));
                        const toIndex = parseInt(this.getAttribute('data-index'));
                        
                        // Rearrange the data array
                        const [movedItem] = jsonData.splice(fromIndex, 1);
                        jsonData.splice(toIndex, 0, movedItem);
                        
                        // Repopulate the table
                        populateTable(jsonData);
                        showToast('Row moved successfully!');
                    }
                });
            });
        }

        // Function to open modal with image and form
        function openModal(imageUrl, index) {
            const modal = document.getElementById('imageModal');
            const modalImage = document.getElementById('modalImage');
            const imageFileName = document.getElementById('imageFileName');
            currentEditIndex = index;
            
            // Set image and filename
            modalImage.src = imageUrl || 'https://via.placeholder.com/400?text=No+Image';
            imageFileName.textContent = `Image: ${imageUrl ? imageUrl.split('/').pop() : 'No image available'}`;
            
            // Populate form with current data
            const item = jsonData[index];
            document.getElementById('editCountry').value = item.country || '';
            document.getElementById('editCurrencyType').value = item.currency_type || 'coin';
            document.getElementById('editDonorName').value = item.donor_name || '';
            document.getElementById('editNote').value = item.note || '';
            document.getElementById('editSize').value = item.size || '';
            document.getElementById('editYear').value = item.year || '';
            
            // Show modal
            modal.style.display = 'flex';
        }

        // Function to close modal
        function closeModal() {
            const modal = document.getElementById('imageModal');
            modal.style.display = 'none';
        }

        // Function to save changes from the modal form
        function saveChanges() {
            if (currentEditIndex === -1) return;
            
            // Get form values
            jsonData[currentEditIndex] = {
                country: document.getElementById('editCountry').value,
                currency_type: document.getElementById('editCurrencyType').value,
                donor_name: document.getElementById('editDonorName').value,
                note: document.getElementById('editNote').value,
                size: document.getElementById('editSize').value,
                year: document.getElementById('editYear').value,
                image: jsonData[currentEditIndex].image // Keep the existing image
            };
            
            // Repopulate table
            if (isFiltered && document.getElementById('keepFilteredView').checked) {
                applyFilters();
            } else {
                populateTable(jsonData);
            }
            
            // Show success message
            showToast('Changes saved successfully!');
            
            // Close modal
            closeModal();
        }

        // Function to delete a row
        function deleteRow(index) {
            if (confirm('Are you sure you want to delete this item?')) {
                jsonData.splice(index, 1);
                
                // Repopulate table
                if (isFiltered && document.getElementById('keepFilteredView').checked) {
                    applyFilters();
                } else {
                    populateTable(jsonData);
                }
                
                showToast('Item deleted successfully!');
            }
        }

        // Function to add a new row
        function addNewRow() {
            const newItem = {
                country: "New Country",
                currency_type: "coin",
                donor_name: "New Donor",
                note: "New note",
                size: "0mm",
                year: "2023",
                image: "placeholder.jpg"
            };
            
            jsonData.push(newItem);
            
            // Repopulate table
            if (isFiltered && document.getElementById('keepFilteredView').checked) {
                applyFilters();
            } else {
                populateTable(jsonData);
            }
            
            // Open modal to edit the new item
            openModal('', jsonData.length - 1);
        }

        // Function to download updated JSON
        function downloadJSON() {
            const dataStr = JSON.stringify(jsonData, null, 2);
            const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
            
            const exportFileDefaultName = 'coins.json';
            
            const linkElement = document.createElement('a');
            linkElement.setAttribute('href', dataUri);
            linkElement.setAttribute('download', exportFileDefaultName);
            linkElement.click();
            
            showToast('JSON file downloaded successfully!');
        }

        // Function to handle file upload
        function handleFileUpload(e) {
            const file = e.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = function(event) {
                try {
                    const parsedData = JSON.parse(event.target.result);
                    jsonData = parsedData;
                    isFiltered = false;
                    activeFilters = {};
                    updateFilterIndicator();
                    populateTable(jsonData);
                    showToast('File uploaded successfully!');
                } catch (error) {
                    alert('Error parsing JSON file: ' + error.message);
                }
            };
            reader.readAsText(file);
        }

        // Function to show toast message
        function showToast(message) {
            const toast = document.getElementById('toastMessage');
            toast.textContent = message;
            toast.style.display = 'block';
            toast.style.opacity = '1';
            
            setTimeout(() => {
                toast.style.opacity = '0';
                setTimeout(() => {
                    toast.style.display = 'none';
                }, 500);
            }, 3000);
        }

        // Function to apply search filters
        function applySearch() {
            const searchTerm = document.getElementById('countrySearch').value.toLowerCase();
            
            if (!searchTerm) {
                // If search term is empty, show all data
                isFiltered = false;
                activeFilters = {};
                updateFilterIndicator();
                populateTable(jsonData);
                return;
            }
            
            const filteredData = jsonData.filter(item => {
                return item.country && item.country.toLowerCase().includes(searchTerm);
            });
            
            isFiltered = true;
            activeFilters.country = searchTerm;
            updateFilterIndicator();
            populateTable(filteredData);
        }

        // Function to apply advanced filters
        function applyAdvancedFilters() {
            const sizeTerm = document.getElementById('sizeSearch').value.toLowerCase();
            const yearTerm = document.getElementById('yearSearch').value.toLowerCase();
            const currencyTypeTerm = document.getElementById('currencyTypeSearch').value;
            
            // If all filters are empty, show all data
            if (!sizeTerm && !yearTerm && !currencyTypeTerm) {
                isFiltered = false;
                activeFilters = {};
                updateFilterIndicator();
                populateTable(jsonData);
                return;
            }
            
            const filteredData = jsonData.filter(item => {
                let match = true;
                
                // Size filter
                if (sizeTerm) {
                    if (item.size) {
                        // Check if it's a range search (e.g., "25x30" or "25-30")
                        if (sizeTerm.includes('x') || sizeTerm.includes('-')) {
                            const sizeParts = item.size.toLowerCase().split(/x|-/);
                            const searchParts = sizeTerm.split(/x|-/);
                            
                            // Check if any part matches
                            match = match && searchParts.some(part => 
                                sizeParts.some(sp => sp.includes(part))
                            );
                        } else {
                            match = match && item.size.toLowerCase().includes(sizeTerm);
                        }
                    } else {
                        match = false;
                    }
                }
                
                // Year filter
                if (yearTerm) {
                    if (item.year) {
                        // Check if it's a range search (e.g., "1990-2000")
                        if (yearTerm.includes('-')) {
                            const [start, end] = yearTerm.split('-').map(y => parseInt(y.trim()));
                            const itemYear = parseInt(item.year);
                            
                            if (!isNaN(start) && !isNaN(end) && !isNaN(itemYear)) {
                                match = match && (itemYear >= start && itemYear <= end);
                            } else {
                                match = match && item.year.toLowerCase().includes(yearTerm);
                            }
                        } else {
                            match = match && item.year.toLowerCase().includes(yearTerm);
                        }
                    } else {
                        match = false;
                    }
                }
                
                // Currency type filter
                if (currencyTypeTerm) {
                    match = match && item.currency_type === currencyTypeTerm;
                }
                
                return match;
            });
            
            isFiltered = true;
            activeFilters = {};
            if (sizeTerm) activeFilters.size = sizeTerm;
            if (yearTerm) activeFilters.year = yearTerm;
            if (currencyTypeTerm) activeFilters.currency_type = currencyTypeTerm;
            
            updateFilterIndicator();
            populateTable(filteredData);
        }

        // Function to update filter indicator
        function updateFilterIndicator() {
            const indicator = document.getElementById('filterIndicator');
            
            if (Object.keys(activeFilters).length === 0) {
                indicator.style.display = 'none';
                return;
            }
            
            let html = 'Active filters: ';
            const filterTags = [];
            
            for (const [key, value] of Object.entries(activeFilters)) {
                filterTags.push(`
                    <span class="filter-tag">
                        ${key}: ${value}
                        <span class="close" onclick="removeFilter('${key}')">&times;</span>
                    </span>
                `);
            }
            
            indicator.innerHTML = html + filterTags.join('');
            indicator.style.display = 'block';
        }

        // Function to remove a specific filter
        function removeFilter(filterKey) {
            delete activeFilters[filterKey];
            
            if (Object.keys(activeFilters).length === 0) {
                // No filters left, show all data
                isFiltered = false;
                populateTable(jsonData);
            } else {
                // Reapply remaining filters
                applyAdvancedFilters();
            }
            
            updateFilterIndicator();
        }

        // Function to clear all filters
        function clearAllFilters() {
            document.getElementById('countrySearch').value = '';
            document.getElementById('sizeSearch').value = '';
            document.getElementById('yearSearch').value = '';
            document.getElementById('currencyTypeSearch').value = '';
            
            isFiltered = false;
            activeFilters = {};
            updateFilterIndicator();
            populateTable(jsonData);
        }

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            // Load the default JSON file
            loadDefaultJSON();
            
            // Populate country dropdown
            const countries = ["USA", "Canada", "UK", "Australia", "Japan", "Germany", "France", "Italy", "China", "India"];
            const countryDropdown = document.getElementById('editCountry');
            countries.forEach(country => {
                const option = document.createElement('option');
                option.value = country;
                option.textContent = country;
                countryDropdown.appendChild(option);
            });
            
            // Set up event listeners
            document.getElementById('closeModal').addEventListener('click', closeModal);
            document.getElementById('saveChangesBtn').addEventListener('click', saveChanges);
            document.getElementById('addRowBtn').addEventListener('click', addNewRow);
            document.getElementById('downloadBtn').addEventListener('click', downloadJSON);
            document.getElementById('uploadFileBtn').addEventListener('click', function() {
                document.getElementById('uploadFileInput').click();
            });
            document.getElementById('uploadFileInput').addEventListener('change', handleFileUpload);
            document.getElementById('jsonFileInput').addEventListener('change', handleFileUpload);
            
            // Search functionality
            document.getElementById('countrySearch').addEventListener('input', applySearch);
            document.getElementById('clearSearch').addEventListener('click', function() {
                document.getElementById('countrySearch').value = '';
                applySearch();
            });
            
            // Advanced search functionality
            document.getElementById('applyAdvancedSearch').addEventListener('click', applyAdvancedFilters);
            document.getElementById('clearAdvancedSearch').addEventListener('click', clearAllFilters);
            
            // Close modal when clicking outside
            window.addEventListener('click', function(event) {
                const modal = document.getElementById('imageModal');
                if (event.target === modal) {
                    closeModal();
                }
            });
            
            // Save data before page unload
            window.addEventListener('beforeunload', function() {
                localStorage.setItem('currencyData', JSON.stringify(jsonData));
            });
        });
    </script>
</body>

</html>